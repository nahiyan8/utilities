#ifndef POOL_HPP_INCLUDED
#define POOL_HPP_INCLUDED

////////////////////////////////////////////////////////////////////////////////
//////////////////////////// ---- DECLARATIONS ---- ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <stddef.h>
#include <iostream>

// Shortness for brevity.. whatever that means..
typedef unsigned int uint_t;

template <class T> class Pool
{
	private:
		/* -- Variables -- */
		T *pool;
		bool *used;
		size_t size;
		
		bool initialised;
		
	public:
		/* -- Public functions -- */
		Pool() {};
		Pool(size_t _size);
		~Pool();
		
		void create(size_t _size);
		void destroy();
		
		uint_t allocate	();
		uint_t allocate	(uint_t slot);
		void deallocate	(uint_t slot);
		
		uint_t getAvailable	() const;
		uint_t getUsed		() const;
		
		inline bool isAvailable	(uint_t slot) const;
		inline bool isUsed		(uint_t slot) const;
		inline size_t getSize	() const;
		
		inline T& operator[](uint_t slot);
};

////////////////////////////////////////////////////////////////////////////////
/////////////////////////// ---- IMPLEMENTATION ---- ///////////////////////////
///////////////////// --- CONSTRUCTOR/S & DESTRUCTOR/S --- /////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T> Pool<T>::Pool(size_t _size)
{
	create(_size);
}

////////////////////////////////////////////////////////////////////////////////

template <class T> Pool<T>::~Pool()
{
	destroy();
}

////////////////////////////////////////////////////////////////////////////////

template <class T> void Pool<T>::create(size_t _size)
{
	if (initialised)
		return;
	
	std::cout << "pool created, size: " << _size << '\n';
	
	size = _size;
	pool = nullptr;
	used = nullptr;
	
	try
	{
		pool	= new T    [size];
		used	= new bool [size];
		
		for (uint_t slot = 0; slot < size; ++slot)
			used[slot] = false;
	}
	catch ( ... )
		{ destroy(); }
	
	initialised = true;
}

////////////////////////////////////////////////////////////////////////////////

template <class T> void Pool<T>::destroy()
{
	if (pool)	delete [] pool;
	if (used)	delete [] used;
	
	size = 0;
	initialised = false;
}

////////////////////////////////////////////////////////////////////////////////
//////////////////////////// --- (DE)ALLOCATION --- ////////////////////////////
///////////////////////// -- MEMORY (DE)ALLOCATOR/S -- /////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T> uint_t Pool<T>::allocate(uint_t slot)
{
	if ( !initialised || slot >= size )
		return ~0;
	
	if ( used[slot] )
		return ~0;
	
	used[slot] = true;
	return slot;
}

////////////////////////////////////////////////////////////////////////////////

template <class T> void Pool<T>::deallocate(uint_t slot)
{
	if ( !initialised || slot >= size )
		return;
	
	used[slot] = false;
}

////////////////////////////////////////////////////////////////////////////////

uint_t Pool<T>::allocate()
{

}


////////////////////////////////////////////////////////////////////////////////
///////////////////////// -- ALLOCATION INFORMATION -- /////////////////////////
////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
////////////////////////////// --- OPERATOR/S --- //////////////////////////////
////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////

#endif